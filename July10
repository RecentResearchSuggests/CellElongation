//==========================================================//
//  Cell Growth Model 1.3                                   //
//  (no spacial, only temporal, cell death included)        //
//                                                          //
//  Created by Steven P Murray on 07/10/18.                 //
//  Revised by Steven P Murray on 07/10/18.                 //
//  Copyright Â© 2018 Steven P Murray. All rights reserved.  //
//                                                          //
//==========================================================//

// INCLUDE LIBRARIES AND DEFINE GLOBAL CONSTANTS

#include <iostream>
#include <string>
#include <cstdlib>
#include <cmath>
#include <fstream>
#include <utility>

#define totalTime 360.0 // total time
#define maxCells 10000  // max number of cells
#define growthRate 0.023  // growth rate
#define deathRate 0.001 // death rate
#define carryCap 5000   // carrying capacity
#define divRate 0.5  // division rate
#define delta_t 0.001   // the length of each little time step
#define divideProb (divRate * delta_t)  // probability that the cell will divide
#define totalSteps floor(totalTime/delta_t) // iterating over the total time steps

//=============================================================================================================

// DEFINE FUNCTIONS

double growth(void);
double dynamics(void);
int pds(void);
double split(void);
double gaussian(void);

//=============================================================================================================

// DEFINE CELL STRUCTURE

struct cell
{
    int pds;    // potential dividing sites
    double length;  // length of cell
}
cell_array[maxCells];   // keeping track of each cells

//=============================================================================================================

// POINT STURCTURE

struct Point
{
    double x;
    double y;
}
Point[maxCells];

//=============================================================================================================

// MAIN

using namespace std;

// starting with one cell
int numCells = 1;   // start with one cell until it divides, then numCell will increase

int main()
{
    // create a data file
    FILE *output;
    output = fopen("/Users/Steve/Documents/Xcode/Cell Growth Model 1.3/data.txt", "w+");
    
    // seeding the random number generator
    srand (static_cast <unsigned> (time(0)));
    
    // initialize the cell we are starting with
    cell_array[0].length = 2;
    cell_array[0].pds = 0;
    
    // grow through all time steps
    for (int i = 0; i < totalSteps; i++)
    {
        growth();
        dynamics();
        pds();
        split();
    }
    
    for (int num = 0; num < numCells; num++)
    {
        cout << "Cell " << num << "\t";
        
        cout << "Length: " << cell_array[num].length << "\t\t";
        
        cout << "PDS: " << cell_array[num].pds << endl;
        
        // print 6 columns: cell number, cell length, cell angle, x-component, y-component, PDS
        fprintf(output, "%d\t%f\t%d\n", num, cell_array[num].length, cell_array[num].pds);
    }
    
    // close the file
    fclose(output);
    
    return 0;
}

//=============================================================================================================

// GROWTH FUNCTION
// dl/dt = growthRate * time
// ==> length = length + (length)(growthRate)(dt)

double growth(void)
{
    for (int num = 0; num < numCells; num++)
    {
        // cell grows
        cell_array[num].length = cell_array[num].length * (1 + growthRate * delta_t);
    }
    return 0;
}

//=============================================================================================================

// NEW DYNAMICS FUNCTION
// dN_s/dt = (growthRate * N_s) - (deathRate * N * N_s / k)
// N_s == cell
// N == total length (biomass)
// k == carrying capacity

double dynamics(void)
{
    
    return 0;
}

//=============================================================================================================

// NUMBER OF PDS

int pds(void)
{
    for (int num = 0; num < numCells; num++)
    {
        if (cell_array[num].length > 2)
        {
            // first round down the length to nearest integer
            double floor (double (cell_array[num].length) / 2);
            
            // calculate the number of PDS
            cell_array[num].pds = floor - 1;
        }
    }
    return 0;
}

//=============================================================================================================

// SPLITTING

double split(void)
{
    for (int num = 0; num < numCells; num++)
    {
        // look at each PDS...
        for (int pds_num = 0; pds_num < cell_array[num].pds; pds_num++)
        {
            // ...determine if the PDS is ready to split
            // creating a random number
            float rndm = (float)(rand())/ (float)((unsigned)RAND_MAX + 1);
            
            // if the random number is between 0 and divideProb, it will divide
            if (rndm < divideProb)
            {
                double length_variability = 0.1 * gaussian();   // +- 0.1 um
                
                // create daughter cell (it will be the last cell in the array)
                // adjust daughter cell length (daughter length = old mother length - new mother length)
                cell_array[numCells].length = cell_array[num].length - ((pds_num + 1) * 2 /*um*/) + length_variability;
                
                // adjust the number of PDS in the daughter cell (daughter PDS = old mother PDS - new mother PDS)
                cell_array[numCells].pds = cell_array[num].pds - pds_num - 1;
                
                // increase the number of cells we have by one
                numCells = numCells + 1;
                
                // adjust the new mother cell length
                cell_array[num].length = (pds_num + 1) * 2 - length_variability /*um*/;
                
                // adjust the new number of PDS in the mother cell
                cell_array[num].pds = pds_num;
                
                if (numCells > maxCells)
                {
                    cout << "Maximum number of cells exceeded.";
                    break;
                }
            }
        }
    }
    return 0;
}

//=============================================================================================================

// GAUSSIAN FUNCTION

double gaussian(void)
{
    // mean 0
    // sd 1
    
    double u = ((double) rand() / (RAND_MAX)) * 2 - 1;
    double v = ((double) rand() / (RAND_MAX)) * 2 - 1;
    double r = u * u + v * v;
    if (r == 0 || r > 1) return gaussian();
    double c = sqrt(-2 * log(r) / r);
    return u * c;
}

//=============================================================================================================
